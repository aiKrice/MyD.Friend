#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app'),
    debug = require('debug')('server:server'),
    http = require('http'),
    log = require('log'),
    db = require('../db/connection'),
    sockets = require('../services/sockets');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

var server = app.listen(app.get('port'), function () {
    if (server) {
        log(null, 'Express server listening on port '.green + server.address().port);
        // connect websockets
        return sockets(server);
    }
    log("Express server not connected");
});


//db.connect(function () {
//    log(null,'Connected to mongodb server'.green);
//    var server = app.listen(app.get('port'), function () {
//        if (server){
//            log(null,'Express server listening on port '.green + server.address().port);
//            // connect websockets
//            return sockets(server);
//        }
//        log("Express server not connected");
//    });
//    server.on('error', onError.bind(server));
//    server.on('listening', onListening.bind(server));
//});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = this.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
